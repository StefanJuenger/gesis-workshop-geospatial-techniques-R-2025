---
title: "Mapping I"
subtitle: "GESIS Workshop: Introduction to Geospatial Techniques for Social Scientists in R"
author: "Stefan JÃ¼nger & Dennis Abel"
date: April 09, 2025
execute:
  echo: true
format:
  revealjs:
    embed-resources: true
    theme: [simple, tweaks.css]
    smaller: true
    scrollable: true
    slide-number: "c/t"
    logo: ../img/GESIS-Logo_2024.svg.png
editor_options: 
  chunk_output_type: console
---

```{r}
#| include: false
library(sf)
library(terra)
library(tmap) 
```


## Now

```{r}
#| echo: false
source("course_content.R") 

course_content |> 
  kableExtra::row_spec(5, background = "yellow")
```

## Fun with flags... MAPS!

![](../img/fun_with_flags.jpg){.r-stretch  fig-align="center"}

<small>Fun with Flags by Dr. Sheldon Cooper. [Big Bang Theory](https://youtu.be/_e8PGPrPlwA)</small>

## Fun with maps

`plot()` does not allow us to manipulate the maps in an easy. But we already have the two most essential ingredients to create a nice map:

1. Vector data stored in the `./data` folder
2. Some (hopefully) interesting attributes linked with the geometries.

```{r}
#| echo: false
cologne <-  sf::read_sf("../../data/cologne.shp") 

attributes_cologne <- 
  cologne |> 
  dplyr::mutate(id = as.numeric(NUMMER)) |> 
  dplyr::select(id) |> 
  dplyr::left_join(
    readr::read_delim("../../data/carytpes_cologne.csv", delim = ";"),
    by = "id"
  ) |> 
  dplyr::left_join(
    readr::read_delim("../../data/EUelection2019_cologne.csv", delim = ";") |> 
      dplyr::select(-name),
    by = "id"
  ) |>  
  dplyr::rename_with(~ stringr::str_remove(., "_shr*"), everything())


charger_cologne <-
  readr::read_delim(
    "../../data/charging_points_ger.csv", 
    delim =";"
  ) |>  
  dplyr::filter(!is.na(longitude) & !is.na(latitude)) |>  
  sf::st_as_sf(  
    coords = c("longitude", "latitude"),
    crs = 4326
  ) |>  
  sf::st_transform(crs = 3035) |> 
  sf::st_intersection(cologne |> dplyr::select(NUMMER))

streets_cologne <-
  sf::read_sf(
    "../../data/streets_cologne.shp"
  )

inhabitants_cologne <- terra::rast("../../data/inhabitants_cologne.tif")

plot(attributes_cologne["ecar"])
```

## Cologne data

```{r}
#| eval: false
attributes_cologne <- sf::read_sf("./data/attributes_cologne.shp")  

charger_cologne <- sf::read_sf("./data/charger_cologne.shp")

streets_cologne <- sf::read_sf("./data/streets_cologne.shp")

inhabitants_cologne <- terra::rast("./data/inhabitants_cologne.tif")
```

## What makes a good map?

:::: columns
::: {.column width="40%"}
**Good Mapping**

- reduction to most important information
- legends, scales, descriptions
- audience oriented
- adjusted for color vision deficiencies
:::

::: {.column width="40%"}
**Bad Mapping**

- Overcrowding and overlapping
- Unreadable information
- Missing information like the legend or source 
- Poor choice of color palettes
:::
::::

## What makes a good map?

:::: columns
::: {.column width="50%"}
![](https://media.giphy.com/media/C9x8gX02SnMIoAClXa/giphy-downsized-large.gif){fig-align="left" width="40%"}

<small>[Source](https://media.giphy.com/media/C9x8gX02SnMIoAClXa/giphy-downsized-large.gif)</small>
:::

::: {.column width="50%"}
... but there is one other type:

**The fast but nice map.**

- fast exploration of spatial data by visualizing the geometries and attributes
- might not be publication-ready yet, but they are more rewarding than just plotting information.
:::
::::

## The choice is yours: `R` packages for mapping

As always, `R`  offers several ways to map spatial data, and the provided packages are various.
What is out there? Just a few:

- Base R graphics package: [`mapdata`](https://rpubs.com/rbatzing/mapping)
- Mobile-friendly interactive maps: [`leaflet`](https://rstudio.github.io/leaflet/)
- Interactive and static thematic maps based on shapefiles:
- [`tmap`](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html)
- [`mapview`](https://r-spatial.github.io/mapview/)

## Our choice for today

Today, we'll concentrate on the package [`tmap`](https://cran.r-project.org/web/packages/tmap/index.html)

- Very intuitive and makes 'good' decisions for us
- The syntax is very similar to [`ggplot2`](https://cran.r-project.org/web/packages/ggplot2/index.html)^[A wide-known 'secret' is that `tmap` creates a map based on `ggplot2`, so `ggplot2`-specific graphics manipulations will often work as well.]

![](../img/68747470733a2f2f6d74656e6e656b65732e6769746875622e696f2f646f776e6c6f6164732f696d616765732f636c61737369632e706e67.png){width="35%" fig-align="center"}

<p align = "center"><small>[Source](https://www.researchgate.net/figure/Classic-world-map-consisting-of-gridded-elevation-data-rivers-country-borders-and_fig7_324652152)</small></p>

## First map: Cologne electric car data

:::: columns
::: {.column width="50%"}
```{r}
#| eval: false
#| fig.asp: 1
library(tmap)

tm_shape(attributes_cologne) +
  tm_fill("ecar")
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| fig.asp: 1
library(tmap)

tm_shape(attributes_cologne) +
  tm_fill("ecar")
```
:::
::::

## `tmap` in a nutshell

:::: columns
::: {.column width="50%"}
There is not much to consider when using `tmap` but two essential requirements:

1. Define your spatial object.
2. Choose a building block to determine how to display information.
:::

::: {.column width="50%"}
```{r tmap-display, eval = FALSE}
# define and introduce every (new) 
# geospatial data object
tm_shape() +
  
  # choose at least one building block as 
  # 'aesthetic layer'
  
  # for polygon layer choose from:
  tm_fill() + # polygons without borders
  tm_polygons() +  # polygons with borders
  tm_borders() + # only borders of polygons
  
  # for line layer choose:
  tm_lines() +
  
  # for point layer choose:
  tm_dots() +
  tm_bubbles() +
  
  # for raster layer choose
  tm_raster() +
  tm_rgb() +
  
  ...

# for all of them:
?'tmap-element'
```
:::
::::

## `tmap` in a nutshell: polygon layer

```{r}
#| fig.asp: .8
#| layout-ncol: 3
tm_shape(attributes_cologne) +
  tm_fill()

tm_shape(attributes_cologne) +
  tm_polygons()

tm_shape(attributes_cologne) +
  tm_borders()
```


## `tmap` in a nutshell: line and point layer

```{r}
#| fig.asp: .7
#| layout-ncol: 2
tm_shape(streets_cologne) +
  tm_lines()

tm_shape(charger_cologne) +
  tm_dots()
```

## `tmap` in a nutshell: raster layer

:::: columns
::: {.column width="50%"}
```{r}
#| eval: false
#| fig.asp: 1
tm_shape(inhabitants_cologne) +
  tm_raster()
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| fig.asp: 1
tm_shape(inhabitants_cologne) +
  tm_raster()
```
:::
::::


## `tmap` in a nutshell: put it all together

We can map the geometric attributes as single layers, but we can also layer our map and stack the layers on each other.

:::: columns
::: {.column width="50%"}
```{r}
#| eval: false
#| fig.asp: .9
tm_shape(attributes_cologne) +
  tm_polygons(fill_alpha = .8) +
  tm_shape(streets_cologne) +
  tm_lines(col = "red") +
  tm_shape(inhabitants_cologne) +
  tm_raster(col_alpha = .8) +
  tm_shape(charger_cologne) +
  tm_dots()
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| fig.asp: .9
tm_shape(attributes_cologne) +
  tm_polygons(fill_alpha = .8) +
  tm_shape(streets_cologne) +
  tm_lines(col = "red") +
  tm_shape(inhabitants_cologne) +
  tm_raster(col_alpha = .8) +
  tm_shape(charger_cologne) +
  tm_dots()
```
:::
::::

## Add some information

After we took care of our geometric types, we want to add some information to our data. The inner construction of each building block of `tm_elements` is the same.

1. Define the variable of interest first by stating the column name. 
2. Add a name for the legend title and color palette, adjust the legend and scales ...

## Choosing an attribute

:::: columns
::: {.column width="50%"}
```{r}
#| eval: false
#| fig.asp: 1
tm_shape(attributes_cologne) +
  tm_polygons("ecar") 
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| fig.asp: 1
tm_shape(attributes_cologne) +
  tm_polygons("ecar") 
```
:::
::::

## Choosing a color palette

:::: columns
::: {.column width="50%"}
```{r}
#| eval: false
#| fig.asp: 1
tm_shape(attributes_cologne) +
  tm_polygons(
    "ecar",
    fill.scale = 
      tm_scale_continuous(values = "brewer.rd_pu"),
    fill.legend = 
      tm_legend(title = "Electric Cars")
  ) 
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| fig.asp: 1
tm_shape(attributes_cologne) +
  tm_polygons(
    "ecar",
    fill.scale = 
      tm_scale_continuous(values = "brewer.rd_pu"),
    fill.legend = 
      tm_legend(title = "Electric Cars")
  ) 
```
:::
::::

## Finding out which color suits you

Finding the correct color palette is a bit tricky. Run the following command to open a nice graphical interface that helps you with that:

```{r}
#| eval: false
cols4all::c4a_gui()
```

## Re-placing the legend

:::: columns
::: {.column width="50%"}
```{r}
#| eval: false
#| fig.asp: 1
tm_shape(attributes_cologne) +
  tm_polygons(
    "ecar",
    fill.scale = 
      tm_scale_continuous(values = "brewer.rd_pu"),
    fill.legend = 
      tm_legend(title = "Electric Cars")
  ) +
  tm_layout(legend.outside = TRUE)
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| fig.asp: 1
tm_shape(attributes_cologne) +
  tm_polygons(
    "ecar",
    fill.scale = tm_scale_continuous(values = "brewer.rd_pu"),
    fill.legend = tm_legend(title = "Electric Cars")
  ) +
  tm_layout(legend.outside = TRUE)
```
:::
::::

## Compasses & scale bars

:::: columns
::: {.column width="50%"}
```{r}
#| eval: false
#| fig.asp: 1
tm_shape(attributes_cologne) +
    tm_polygons(
    "ecar",
    fill.scale = 
      tm_scale_continuous(values = "brewer.rd_pu"),
    fill.legend = 
      tm_legend(title = "Electric Cars")
  ) +
  tm_scalebar(position = c("left", "bottom")) +
  tm_compass(position = c("right", "top"))
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| fig.asp: 1
tm_shape(attributes_cologne) +
    tm_polygons(
    "ecar",
    fill.scale = 
      tm_scale_continuous(values = "brewer.rd_pu"),
    fill.legend = 
      tm_legend(title = "Electric Cars")
  ) +
  tm_scalebar(position = c("left", "bottom")) +
  tm_compass(position = c("right", "top"))
```
:::
::::

## Exercise 3_1: Basic Maps

[Exercise](https://stefanjuenger.github.io/gesis-workshop-geospatial-techniques-R-2025/exercises/3_1_Basic_Maps.html)


## What's left?

![](../img/enough_maps.jpg){.r-stretch fig-align="center"}

## Getting interactive!

:::: columns
::: {.column width="50%"}
```{r}
#| eval: false
#| fig.asp: .8
ecar_map <-
tm_shape(attributes_cologne) +
  tm_borders(col = "black") +
  tm_polygons("ecar")

tmap_mode("view")

ecar_map
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| fig.asp: .8
ecar_map <-
tm_shape(attributes_cologne) +
  tm_borders(col = "black") +
  tm_polygons("ecar")

tmap_mode("view")

ecar_map
```
:::
::::

```{r}
#| include: false
tmap_mode("plot")
```

## Facets I

```{r}
tm_shape(attributes_cologne) +
  tm_polygons(c("cdu", "spd", "greens", "afd", "left", "fdp")) +
  tm_facets_stack(ncol = 3)
```

## Facets II

```{r}
attributes_cologne |> 
  dplyr::mutate(city_area = as.integer(substr(id, 1, 1))) |> 
  tm_shape() +
  tm_polygons(c("ecar")) +
  tm_facets_wrap(by = "city_area", nrow = 2) +
  tm_layout(panel.labels = c("1 Innenstadt","2 Rodenkirchen","3 Lindenthal",
                             "4 Ehrenfeld", "5 Nippes","6 Chorweiler",
                             "7 Porz", "8 Kalk", "9 MÃ¼lheim")) 
```

## Change the overall style

:::: columns
::: {.column width="50%"}
```{r}
#| eval: false
#| fig.asp: 1
tm_shape(attributes_cologne) +
  tm_polygons("ecar") +
  # tmap_style() shows all available styles
  tm_style("classic") 
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| fig.asp: 1
tm_shape(attributes_cologne) +
  tm_polygons("ecar") +
  # tmap_style() shows all available styles
  tm_style("classic") 
```
:::
::::

## Color vision deficiencies: standard palette

```{r}
#| echo: false
tmp <-
  tm_shape(attributes_cologne) +
  tm_polygons("ecar") +
  tm_layout(legend.show = FALSE)

colorBlindness::cvdPlot(tmp)
```

<small>Created with the package [`colorBlindness`](https://cran.r-project.org/web/packages/colorBlindness/index.html)</small>

## Color vision deficiencies: viridis palette
```{r}
#| echo: false
tmp <-
  tm_shape(attributes_cologne) +
  tm_polygons(
    "ecar", 
    fill.scale = tm_scale_continuous(values = "viridis")
    ) +
  tm_layout(legend.show = FALSE)

colorBlindness::cvdPlot(tmp)
```

<small>Created with the package [`colorBlindness`](https://cran.r-project.org/web/packages/colorBlindness/index.html)</small>

## Animation

`tm_animate()` allows you to create animated maps and visualize changes in spatial data, e.g. over time or attributes.
You can customize the animation's duration, frame rate, timeline sliders, and transition effects.

:::: columns
::: {.column width="50%"}
```{r}
#| eval: false
vote_gif <- 
  attributes_cologne |> 
  tidyr::pivot_longer(
    # Select all columns to pivot
    cols = 
      c("cdu", "spd", "greens", "afd", 
        "left", "fdp"),  
    # New column name for party identifier
    names_to = "party_id",  
    # New column name for vote shares
    values_to = "voteshare" 
  ) |> 
  tm_shape() +
  tm_polygons(c("voteshare")) +
  tm_facets_grid(pages = "party_id")  

tmap_animation(
  vote_gif, 
  filename = "../img/vote_gif.gif",
  delay=150
) 
```
:::

::: {.column width="50%"}
![](../img/vote_gif.gif){fig-align="center" width="65%"}
:::
::::

## Save Maps

`tmap` offers support for various output formats, including:

- Static Images: PNG, JPEG, TIFF, etc.
- Interactive Web Maps: HTML, JavaScript (using packages like leaflet).
- Animated Maps: GIF, MP4, etc.

You can also control width and height, dpi, etc.

```{r}
#| eval: false
# save regular map
tmap_save(ecar_map, filename = "ecar_map.png")

# save as interactive map
tmap_save(ecar_map, filename = "ecar_map.html" )
```

## Note On Mapping Responsible

**In the best cases**, maps are easy to understand and an excellent way to transport (scientific) messages. 
<br>

**In the worst cases**, they simplify (spurious) correlations and draw a dramatic picture of the world. 
<br>

**Maps can shape narratives**

- Decisions on which projection you use (remember the `true size` projector?), 
- the segment of the world you choose, 
- and the colors and styles you add have a strong influence.

Example: [Kenneth Field's blog post](https://www.esri.com/arcgis-blog/products/product/mapping/mapping-coronavirus-responsibly/)

## Exercise 3_2: Fun with Maps

[Exercise](https://stefanjuenger.github.io/gesis-workshop-geospatial-techniques-R-2025/exercises/3_2_Fun_with_Maps.html)
