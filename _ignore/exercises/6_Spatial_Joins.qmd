---
title: "Exercise 6: Spatial Joins"
subtitle: 'Introduction to Geospatial Techniques for Social Scientists in R'
author: Stefan JÃ¼nger & Dennis Abel
format: 
  html:
    embed-resources: true
    code-copy: true
execute:
  echo: true
editor: visual
callout-icon: false
callout-appearance: minimal
editor_options: 
  chunk_output_type: console
---

### Exercises

::: callout-note
## `r emo::ji("weight_lifting_man")` Exercise 1

We may not always rely on georeferenced data collected in the whole area of a country. Thus, when exploiting geospatial data for linking, one exercise is to subset the data. This could be a subset of the charging station data used in the lecture. Let's say we conducted a survey in the German federal state North-Rhine Westphalia (NRW).

Subset the charger data file yourself by relying on the spatial information of the file `charging_points_ger.csv` and a polygon of NRW. There are two ways to achieve this. How many chargers are located within NRW?
:::

::: {.callout-caution collapse="true"}
## `r emo::ji("bulb")` Tip

You need two datasets for that: the point layer `charging_points_ger.csv` (remember to adjust the crs) in the `./data` folder and polygons of NRW. For the latter, you can again use the `osmdata` syntax or one of the shapefiles in the `./data/folder` you filter for NRW.
:::

::: {.callout-caution collapse="true"}
## `r emo::ji("bulb")` Tip

You can explore two functions: `sf::st_join` and `sf::st_intersection()`. The default of `sf::st_join()` will leave you with a 'left-join' and returns a data object with all chargers and matching district information for those located within NRW. You can reset the option to perform an 'inner-join' and keep only the observation that lay within the predefined area (`sf::st_join(x , y, join  = "", left = FALSE)`).
:::

::: callout-note
## `r emo::ji("weight_lifting_man")` Exercise 2

Did the operationalization of charger accessibility convince you? There may be other ways, such as the proportion of residents with max. 1000 m linear distance to the nearest charger.

You may not know this, but we have everything we need to create this indicator on a smaller scale as well: charger data, Census data, and our synthetic georeferenced data! So, what is the mean share of residents with max. 1000m linear distance to the nearest train station in a 5km neighborhood of our fake respondents?

You can run the code below to load all the data you need.
:::

```{r}
#| eval: false
#| message: false
#| warning: false
# packages
library(dplyr)
library(osmdata)
library(sf)
library(terra)

# load charger
charger_ger <- 
  # Read charging station points datae
  readr::read_delim("./data/charging_points_ger.csv", delim = ";") |> 
  # Filter out rows with missing longitude or latitude
  dplyr::filter(!is.na(longitude) & !is.na(latitude)) |> 
  # Convert data frame to sf object
  sf::st_as_sf(coords = c("longitude", "latitude"), crs = 4326)

# nrw polygon
nrw <-
  osmdata::getbb(
    "Nordrhein-Westfalen", 
    format_out = "sf_polygon"
  ) |>  
  _$multipolygon

# charger nrw
charger_nrw <- 
  charger_ger |> 
  # Subset point data to sampling area
  sf::st_intersection(nrw)

# Census data
census_inhabitants <- terra::rast("./data/census_inhabitants.tiff") 

# crs transformations
nrw <- sf::st_transform(nrw, 3035)
charger_nrw <- sf::st_transform(charger_nrw, 3035)

# Synthetic georeferenced data
synthetic_data <- 
  readRDS("./data/synthetic_survey_coordinates.rds") |> 
  sf::st_intersection(nrw)
```

```{r}
#| echo: false
#| message: false
#| warning: false
# packages
library(dplyr)
library(osmdata)
library(sf)
library(terra)

# load charger
charger_ger <- 
  # Read charging station points datae
  readr::read_delim("../../data/charging_points_ger.csv", delim = ";") |> 
  # Filter out rows with missing longitude or latitude
  dplyr::filter(!is.na(longitude) & !is.na(latitude)) |> 
  # Convert data frame to sf object
  sf::st_as_sf(coords = c("longitude", "latitude"), crs = 4326)

# nrw polygon
nrw <-
  osmdata::getbb(
    "Nordrhein-Westfalen", 
    format_out = "sf_polygon"
  ) |>  
  _$multipolygon

# charger nrw
charger_nrw <- 
  charger_ger |> 
  # Subset point data to sampling area
  sf::st_intersection(nrw)

# Census data
census_inhabitants <- terra::rast("../../data/census_inhabitants.tiff")

# crs transformations
nrw <- sf::st_transform(nrw, 3035)
charger_nrw <- sf::st_transform(charger_nrw, 3035)

# Synthetic georeferenced data
synthetic_data <- 
  readRDS("../../data/synthetic_survey_coordinates.rds") |> 
  sf::st_intersection(nrw)
```

::: {.callout-caution collapse="true"}
## `r emo::ji("bulb")` Tip

As always, there are several ways to do this. We suggest the following steps:

1.  Create a point layer with the centroids of all grids in NRW based on the census population layer.

2.  Calculate the distance to the next charger station for each grid.

3.  Create a column that equals 0 if the distance to the next charger is \>1000m and contains the number of inhabitants if \<1000.

4.  Rasterize the sf data object to receive two raster objects: number of inhabitants and number of inhabitants with a max 1000m distance to the next train station.

5.  Calculate the mean for the 5km buffer for each "respondent" for each raster.

6.  Calculate the share.
:::

::: {.callout-caution collapse="true"}
## `r emo::ji("bulb")` Tip

In the add-on slides of the spatial wrangling session, we introduced and gave some information on how to transform the raster to points (and back). To get a `sf` point layer for the raster object, you can use `terra::as.points() |> sf::st_as_sf()`. To rasterize the object, you can use `terra::rasterize(input_points, target_raster, input_raster, field = "target_variable", fun = "mean", background = 0)`.
:::

### Solutions

::: {.callout-tip collapse="true"}
## `r emo::ji("white_check_mark")` Solution 1

```{r}
#| eval: false
# load charger
charger_ger <- 
  # Read charging station points datae
  readr::read_delim("./data/charging_points_ger.csv", delim = ";") |> 
  # Filter out rows with missing longitude or latitude
  dplyr::filter(!is.na(longitude) & !is.na(latitude)) |> 
  # Convert data frame to sf object
  sf::st_as_sf(coords = c("longitude", "latitude"), crs = 4326)


#  use the OSM function
nrw <-
  osmdata::getbb(
    "Nordrhein-Westfalen", 
    format_out = "sf_polygon"
  ) |> 
  _$multipolygon

# or:
nrw <- 
  sf::st_read("./data/VG250_LAN.shp") |> 
  dplyr::filter(GEN == "Nordrhein-Westfalen") |> 
  sf::st_transform(4326)

# option 1
charger_nrw <- 
  charger_ger |> 
  # Subset point data to sampling area
  sf::st_intersection(nrw)

# option 2
# spatial join
charger_nrw <-
  charger_ger |>  
  sf::st_join(
    # point layer nrw
    nrw, 
    # chose intersect or within
    join = sf::st_intersects,
    # option FALSE will 
    # keep only the chargers 
    # which could be joined
    left = FALSE
  )
 
nrow(charger_nrw)
# 11081 chargers in NRW
```

```{r}
#| echo: false
#| message: false
#| warning: false
# load charger
charger_ger <- 
  # Read charging station points datae
  readr::read_delim("../../data/charging_points_ger.csv", delim = ";") |> 
  # Filter out rows with missing longitude or latitude
  dplyr::filter(!is.na(longitude) & !is.na(latitude)) |> 
  # Convert data frame to sf object
  sf::st_as_sf(coords = c("longitude", "latitude"), crs = 4326)


#  use the OSM function
nrw <-
  osmdata::getbb(
    "Nordrhein-Westfalen", 
    format_out = "sf_polygon"
  ) |> 
  _$multipolygon

# or:
nrw <- 
  sf::st_read("../../data/VG250_LAN.shp") |> 
  dplyr::filter(GEN == "Nordrhein-Westfalen") |> 
  sf::st_transform(4326)

# option 1
charger_nrw <- 
  charger_ger |> 
  # Subset point data to sampling area
  sf::st_intersection(nrw)

# option 2
# spatial join
charger_nrw <-
  charger_ger |>  
  sf::st_join(
    # point layer nrw
    nrw, 
    # chose intersect or within
    join = sf::st_intersects,
    # option FALSE will 
    # keep only the chargers 
    # which could be joined
    left = FALSE
  )
 
nrow(charger_nrw)
# 11,081 chargers in NRW
```
:::

::: {.callout-tip collapse="true"}
## `r emo::ji("white_check_mark")` Solution 2

```{r}
#| echo: false
#| message: false
#| warning: false
# packages
library(dplyr)
library(osmdata)
library(sf)
library(terra)

# load charger
charger_ger <- 
  # Read charging station points datae
  readr::read_delim("../../data/charging_points_ger.csv", delim = ";") |> 
  # Filter out rows with missing longitude or latitude
  dplyr::filter(!is.na(longitude) & !is.na(latitude)) |> 
  # Convert data frame to sf object
  sf::st_as_sf(coords = c("longitude", "latitude"), crs = 4326)

# nrw polygon
nrw <-
  osmdata::getbb(
    "Nordrhein-Westfalen", 
    format_out = "sf_polygon"
  ) |>  
  _$multipolygon

# charger nrw
charger_nrw <- 
  charger_ger |> 
  # Subset point data to sampling area
  sf::st_intersection(nrw)

# Census data
census_inhabitants <- terra::rast("../../data/census_inhabitants.tiff")

# crs transformations
nrw <- sf::st_transform(nrw, 3035)
charger_nrw <- sf::st_transform(charger_nrw, 3035)

# Synthetic georeferenced data
synthetic_data <- 
  readRDS("../../data/synthetic_survey_coordinates.rds") |> 
  sf::st_intersection(nrw)
```

```{r}
# Extract inhabitants points for North Rhine-Westphalia (NRW)
nrw_inhabitants <- 
  census_inhabitants |> 
  terra::crop(nrw) |>  
  # convert to points
  terra::as.points() |>   
  # convert to sf object
  sf::st_as_sf() 

# Find the nearest charger for each grid centroid
nearest_charger <- sf::st_nearest_feature(nrw_inhabitants, charger_nrw)

# Calculate distances from inhabitants to the nearest train station
distances <- 
  sf::st_distance(
    nrw_inhabitants, 
    charger_nrw[nearest_charger,], 
    by_element = TRUE
  ) 

# Create a raster representing population  for NRW
# NOTE: You could also use the 'old' raster. However, by converting the
# data the extent of the raster layer might not fit anymore and needs adjustments.
nrw_rast_inhabitants <- 
    census_inhabitants |> 
      terra::crop(nrw)

# Create a raster representing population with train access within 1000m for NRW 
nrw_rast_inhabitants_access <- 
  nrw_inhabitants |>  
  dplyr::mutate(
    charger_access = ifelse(as.numeric(distances) <= 1000, Einwohner, 0)
  ) |> 
  terra::rasterize(
    nrw_rast_inhabitants, 
    field = "charger_access", 
    fun = "mean",
    background = 0
  )

# Extract population within 5km buffers around each respondent
population_buffers <- 
  terra::extract(
    nrw_rast_inhabitants, 
    synthetic_data |> 
      sf::st_buffer(5000), 
    fun = mean,
    na.rm = TRUE
  )

# Extract population within 5km buffers considering charger access within 1000m
population_access_buffers <- 
  terra::extract(
    nrw_rast_inhabitants_access, 
    synthetic_data |> 
      sf::st_buffer(5000), 
    fun = mean,
    na.rm = TRUE
  )

# Combine population data with train access information
linked_df <- 
  synthetic_data |> 
  dplyr::mutate(
    population = population_buffers[[2]],
    population_chargeraccess = population_access_buffers[[2]],
    share_access = population_access_buffers[[2]] / population_buffers[[2]]
)

# Summary of the new data
summary(linked_df)
```
:::
